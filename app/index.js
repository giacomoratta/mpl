const path = require('path')
const BookmarkModule = require('./bookmark')
const ConfigModule = require('./config')
const ExportModule = require('./export')
const PathQueryModule = require('./path-query')
const ProjectModule = require('./project')
const SampleModule = require('./sample')
const { fileUtils } = require('../core/utils/file.utils')
const log = require('./logger').createLogger('app')

/**
 * Starts the boot procedure for the application
 * @param {string} appRootPath: where the executable is located
 * @returns {Promise<boolean>}: false means 'severe error', so app must be closed
 */
const boot = async ({ appRootPath }) => {
  const AppDataDirectory = path.join(appRootPath, process.env.APP_DATA_DIRNAME || 'samm-data')

  log.info('Booting the application...')
  log.info(`App data directory: ${AppDataDirectory}`)

  if (await fileUtils.ensureDir(AppDataDirectory) !== true) return false
  if (await ConfigModule.boot(path.join(AppDataDirectory, 'config.json')) !== true) return false
  if (await BookmarkModule.boot(path.join(AppDataDirectory, 'bookmarks.json')) !== true) return false
  if (await PathQueryModule.boot(path.join(AppDataDirectory, 'path_query.json')) !== true) return false
  if (await ProjectModule.boot(path.join(AppDataDirectory, 'project_history.json')) !== true) return false
  if (await SampleModule.boot(path.join(AppDataDirectory, 'samples_index.json')) !== true) return false
  // todo: remove json extension
  return true
}

/**
 * Cleans many files generated by the application
 * @returns {Promise<boolean>}
 */
const clean = async () => {
  log.info('Cleaning application files...')
  await ConfigModule.clean()
  await BookmarkModule.clean()
  await PathQueryModule.clean()
  await ProjectModule.clean()
  await SampleModule.clean()
  return true
}

module.exports = {
  boot,
  clean,

  BookmarkAPI: BookmarkModule.BookmarkAPI,
  ConfigAPI: ConfigModule.ConfigAPI,
  ExportAPI: ExportModule.ExportAPI,
  PathQueryAPI: PathQueryModule.PathQueryAPI,
  ProjectManagerAPI: ProjectModule.ProjectManagerAPI,
  ProjectHistoryAPI: ProjectModule.ProjectHistoryAPI,
  ProjectTemplateAPI: ProjectModule.ProjectTemplateAPI,
  SampleIndexAPI: SampleModule.SampleIndexAPI,
  SampleLookAPI: SampleModule.SampleLookAPI,
  SampleSetAPI: SampleModule.SampleSetAPI
}
