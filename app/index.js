const path = require('path')
const ConfigModule = require('./config')
const PathQueryModule = require('./path-query')
const ProjectModule = require('./project')
const SampleModule = require('./sample')
const { fileUtils } = require('../core/utils/file.utils')

const { createLogger, setLogsDirectory } = require('../core/logger')
const log = createLogger('app')

/**
 * Starts the boot procedure for the application
 * @param {string} appRootPath: where the executable is located
 * @returns {Promise<boolean>}: false means 'severe error', so app must be closed
 */
const boot = async ({ appRootPath }) => {
  const AppDataDirectory = path.join(appRootPath, process.env.APP_DATA_DIRNAME || 'app-data')
  setLogsDirectory(path.join(AppDataDirectory, 'logs'))

  log.info('Booting the application...')
  log.info(`App data directory: ${AppDataDirectory}`)

  if (await fileUtils.ensureDir(AppDataDirectory) !== true) return false
  if (await ConfigModule.boot(path.join(AppDataDirectory, 'config.json')) !== true) return false
  if (await PathQueryModule.boot(path.join(AppDataDirectory, 'path_query.json')) !== true) return false
  if (await ProjectModule.boot(path.join(AppDataDirectory, 'project_history.json')) !== true) return false
  if (await SampleModule.boot(path.join(AppDataDirectory, 'samples_index.json')) !== true) return false
  // todo: remove json extension
  return true
}

/**
 * Cleans many files generated by the application
 * @returns {Promise<boolean>}
 */
const clean = async () => {
  log.info('Cleaning application files...')
  await ConfigModule.clean()
  await PathQueryModule.clean()
  await ProjectModule.clean()
  await SampleModule.clean()
  return true
}

module.exports = {
  boot,
  clean,

  API: {
    config: ConfigModule.API.config,
    pathQuery: PathQueryModule.API.pathQuery,
    projectManager: ProjectModule.API.projectManager,
    projectHistory: ProjectModule.API.projectHistory,
    projectTemplate: ProjectModule.API.projectTemplate,
    sampleIndex: SampleModule.API.sampleIndex,
    sampleLookup: SampleModule.API.sampleLookup,
    sampleSet: SampleModule.API.sampleSet
  }
}
